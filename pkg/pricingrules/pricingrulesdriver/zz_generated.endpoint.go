// +build !ignore_autogenerated

// Code generated by mga tool. DO NOT EDIT.

package pricingrulesdriver

import (
	"context"
	"errors"
	"github.com/drhidians/checkout/pkg/pricingrules"
	"github.com/go-kit/kit/endpoint"
	kitxendpoint "github.com/sagikazarmark/kitx/endpoint"
)

// endpointError identifies an error that should be returned as an endpoint error.
type endpointError interface {
	EndpointError() bool
}

// serviceError identifies an error that should be returned as a service error.
type serviceError interface {
	ServiceError() bool
}

// Endpoints collects all of the endpoints that compose the underlying service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	ApplyNewCommonPricingRules endpoint.Endpoint
	ApplyNewPricingRules       endpoint.Endpoint
}

// MakeEndpoints returns a(n) Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func MakeEndpoints(service pricingrules.Service, middleware ...endpoint.Middleware) Endpoints {
	mw := kitxendpoint.Combine(middleware...)

	return Endpoints{
		ApplyNewCommonPricingRules: kitxendpoint.OperationNameMiddleware("pricing_rules.ApplyNewCommonPricingRules")(mw(MakeApplyNewCommonPricingRulesEndpoint(service))),
		ApplyNewPricingRules:       kitxendpoint.OperationNameMiddleware("pricing_rules.ApplyNewPricingRules")(mw(MakeApplyNewPricingRulesEndpoint(service))),
	}
}

// ApplyNewCommonPricingRulesRequest is a request struct for ApplyNewCommonPricingRules endpoint.
type ApplyNewCommonPricingRulesRequest struct {
	Rules []pricingrules.CommonPricingRule
}

// ApplyNewCommonPricingRulesResponse is a response struct for ApplyNewCommonPricingRules endpoint.
type ApplyNewCommonPricingRulesResponse struct {
	Err error
}

func (r ApplyNewCommonPricingRulesResponse) Failed() error {
	return r.Err
}

// MakeApplyNewCommonPricingRulesEndpoint returns an endpoint for the matching method of the underlying service.
func MakeApplyNewCommonPricingRulesEndpoint(service pricingrules.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(ApplyNewCommonPricingRulesRequest)

		err := service.ApplyNewCommonPricingRules(ctx, req.Rules)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return ApplyNewCommonPricingRulesResponse{Err: err}, nil
			}

			return ApplyNewCommonPricingRulesResponse{Err: err}, err
		}

		return ApplyNewCommonPricingRulesResponse{}, nil
	}
}

// ApplyNewPricingRulesRequest is a request struct for ApplyNewPricingRules endpoint.
type ApplyNewPricingRulesRequest struct {
	Rules []pricingrules.PricingRule
}

// ApplyNewPricingRulesResponse is a response struct for ApplyNewPricingRules endpoint.
type ApplyNewPricingRulesResponse struct {
	Err error
}

func (r ApplyNewPricingRulesResponse) Failed() error {
	return r.Err
}

// MakeApplyNewPricingRulesEndpoint returns an endpoint for the matching method of the underlying service.
func MakeApplyNewPricingRulesEndpoint(service pricingrules.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(ApplyNewPricingRulesRequest)

		err := service.ApplyNewPricingRules(ctx, req.Rules)

		if err != nil {
			if serviceErr := serviceError(nil); errors.As(err, &serviceErr) && serviceErr.ServiceError() {
				return ApplyNewPricingRulesResponse{Err: err}, nil
			}

			return ApplyNewPricingRulesResponse{Err: err}, err
		}

		return ApplyNewPricingRulesResponse{}, nil
	}
}
